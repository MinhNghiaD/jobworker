syntax = "proto3";

option go_package = "./;proto";

package proto;

service WorkerService {
    // Start a job specified by the command and return a Job with its ID.
    // If the job fails to start, the RPC will fail with the specified error.
    rpc StartJob(Command) returns (Job) {}

    // Stop a job specified by the stop request then return the status of the specified job.
    // It will return the Job status if job is terminated successfully. Otherwise, the RPC will fail with a specified error.
    rpc StopJob(StopRequest) returns (JobStatus) {}

    // Query a the status of a job, specified by its ID. 
    // The returned Job status includes the essential information about the job execution.
    rpc QueryJob(Job) returns (JobStatus) {}

    // Retrieve a stream of log and output of a job, specified by job ID.
    rpc StreamLog(StreamRequest) returns (stream Log) {}
}

message Command {
    // Requested command to be executed.
    string cmd = 1;
    // And its arguments.
    repeated string args = 2;
}

message Job {
    // UUID of the created job.
    string id = 1;
}

message StopRequest {
    // The Job to be stopped.
    Job job = 1;
    // Boolean flag indicate whether to force the process to stop immediately.
    bool force = 2;
}

message StreamRequest {
    // The Job to be stopped.
    Job job = 1;
    // the nb of sequence of the starting point of the stream
    int32 startPoint = 2;
}

message Log {
    // Nb of sequence of the current entry in the stream
    string nbSequence = 1;
    // A line of job log
    string entry = 2;
}

message JobStatus {
    // The queried job.
    Job job = 1;
    // The executed command.
    Command command = 2;
    // The owner who request the job execution.
    string owner = 3;
    // The status of the job
    ProcessStatus status = 4;
}

message ProcessStatus {
    // The Process ID
    int32 pid = 1;
    // The Current State of the process
    ProcessState state = 2;
    // Process exit code. -1 if process is still running
    int32 exitCode = 3;
}

enum ProcessState {
    // Process is running
    RUNNING = 0;
    // Process is terminated by user
    STOPPED = 1;
    // Process has exited 
    EXITED = 2;
}

